
#Peer-graded Assignment: Getting and Cleaning Data Course Project
#You will be required to submit: 1) a tidy data set as described below
##You should create one R script called run_analysis.R that does the following. 

## 1) Merges the training and the test sets to create one data set.
## 2) Extracts only the measurements on the mean and standard deviation for each measurement. 
## 3) Uses descriptive activity names to name the activities in the data set
## 4) Appropriately labels the data set with descriptive variable names. 
## 5) From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.*/

# install relevant packages

library(dplyr)
library(data.table)

#load tables from directory

features          <- read.table("UCI HAR Dataset/features.txt", col.names = c("func_id","func_name"))
activity_labels   <- read.table("UCI HAR Dataset/activity_labels.txt", col.names = c("act_id", "act_name"))
subject_test      <- read.table("UCI HAR Dataset/test/subject_test.txt", col.names = "subject")
x_test            <- read.table("UCI HAR Dataset/test/X_test.txt", col.names = features$func_name)
y_test            <- read.table("UCI HAR Dataset/test/y_test.txt", col.names = "ylabel")
subject_train     <- read.table("UCI HAR Dataset/train/subject_train.txt", col.names = "subject")
x_train           <- read.table("UCI HAR Dataset/train/X_train.txt", col.names = features$func_name)
y_train           <- read.table("UCI HAR Dataset/train/y_train.txt", col.names = "ylabel")

# Task 1: combine dataset

X_comb <- rbind(x_train, x_test)
Y_comb <- rbind(y_train, y_test)

Subject_comb <- rbind(subject_train, subject_test)
Merged_Data <- cbind(Subject_comb, Y_comb, X_comb)

# Task 2: Exctract measurements for mean & std
RequestData <- Merged_Data %>% select(subject, code, contains("mean"), contains("std"))

# Task 3: Change ID to description 
RequestData$code <- activity_labels[RequestData$code, 2]

# Task 4: Change names
names(RequestData)[2] = "activity"
names(RequestData) <- gsub("Acc", "Accelerometer", names(RequestData))
names(RequestData) <- gsub("Gyro", "Gyroscope", names(RequestData))
names(RequestData) <- gsub("BodyBody", "Body", names(RequestData))
names(RequestData) <- gsub("Mag", "Magnitude", names(RequestData))
names(RequestData) <- gsub("^t", "Time", names(RequestData))
names(RequestData) <- gsub("^f", "Frequency", names(RequestData))
names(RequestData) <- gsub("tBody", "TimeBody", names(RequestData))
names(RequestData) <- gsub("-mean()", "Mean", names(RequestData), ignore.case = TRUE)
names(RequestData) <- gsub("-std()", "STD", names(RequestData), ignore.case = TRUE)
names(RequestData) <- gsub("-freq()", "Frequency", names(RequestData), ignore.case = TRUE)
names(RequestData) <- gsub("angle", "Angle", names(RequestData))
names(RequestData) <- gsub("gravity", "Gravity", names(RequestData))

# names(RequestData)


# Task 5: create subset of data with avgs
RequestData$Subject <- as.factor(RequestData$Subject)
RequestData <- data.table(RequestData)

# ?aggregate
avgData <- aggregate(. ~subject  + activity, RequestData, mean)

#head(avgData)

write.table(avgData, "AvgData.txt")






